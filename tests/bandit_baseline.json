{
  "errors": [],
  "generated_at": "2024-11-14T01:25:20Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 4,
      "CONFIDENCE.LOW": 10,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 4,
      "SEVERITY.MEDIUM": 11,
      "SEVERITY.UNDEFINED": 0,
      "loc": 2864,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/builtin/filters.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 63,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/builtin/metrics.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 129,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/core/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/core/configuration.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 233,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/core/constants.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 5,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/core/context.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 422,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/core/project.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 121,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/data_structures/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 15,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/data_structures/monads.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 762,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/feature_flag/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 54,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/feature_flag/base.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 105,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/feature_flag/file.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 92,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/feature_flag/harness.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 190,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/feature_flag/launchdarkly.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 24,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/feature_flag/noop.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 15,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/feature_flag/split.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 22,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/integrations/slack.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 10,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 10,
      "SEVERITY.UNDEFINED": 0,
      "loc": 479,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/main.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 4,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/proxy/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 9,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/proxy/mysql.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 57,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/proxy/planner.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 63,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/cdf/utils/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "68         message = stringify_list(list(message))\n69     assert isinstance(message, str), f\"Message must be a string, got {type(message)}\"\n70     dedented_message = dedent(message)\n",
      "col_offset": 4,
      "end_col_offset": 85,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 69,
      "line_range": [
        69
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "225     \"\"\"Sends a `message` to  Slack `incoming_hook`, by default formatted as markdown.\"\"\"\n226     resp = requests.post(\n227         incoming_hook,\n228         data=json.dumps({\"text\": message, \"mrkdwn\": is_markdown}).encode(\"utf-8\"),\n229         headers={\"Content-Type\": \"application/json;charset=utf-8\"},\n230     )\n231     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 226,
      "line_range": [
        226,
        227,
        228,
        229,
        230
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "244     \"\"\"Sends a Slack message for the start of an extract\"\"\"\n245     resp = requests.post(\n246         incoming_hook,\n247         json=SlackMessageComposer()\n248         .add_primary_blocks(\n249             header_block(f\"{SlackAlertIcon.START} Starting Extract (id: {run_id})\"),\n250             context_block(\n251                 \"*Source:* {source}     |\".format(source=source),\n252                 \"*Status:* Starting Extraction     |\",\n253                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n254             ),\n255             divider_block(),\n256             *compacted_sections_blocks(\n257                 (\"*Tags*\", stringify_list(tags)),\n258                 (\"*Owners*\", stringify_list(owners)),\n259             ),\n260             *compacted_sections_blocks(\n261                 (\"*Environment*\", environment),\n262                 (\n263                     \"*Resources*\",\n264                     f\"{len(resources_selected)}/{resources_count} selected\",\n265                 ),\n266             ),\n267             divider_block(),\n268             text_section_block(\n269                 f\"\"\"\n270 Resources selected for extraction :test_tube:\n271 \n272 {stringify_list(resources_selected)}\n273 \"\"\"\n274             ),\n275             button_action_block(\"View in Harness\", url=\"https://app.harness.io\"),\n276             context_block(f\"*Python Version:* {sys.version}\"),\n277         )\n278         .slack_message,\n279     )\n280     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 245,
      "line_range": [
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "287     # trace = \"\\n\".join(f\"> {line}\" for line in traceback.format_exc().splitlines())\n288     resp = requests.post(\n289         incoming_hook,\n290         json=SlackMessageComposer()\n291         .add_primary_blocks(\n292             header_block(f\"{SlackAlertIcon.ERROR} Extract Failed (id: {run_id})\"),\n293             context_block(\n294                 \"*Source:* {source}     |\".format(source=source),\n295                 \"*Status:* Extraction Failed     |\",\n296                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n297             ),\n298             divider_block(),\n299             text_section_block(\n300                 f\"\"\"\n301 Extract failed after {duration:.2f}s :fire:\n302 \n303 ```\n304 {indent(traceback.format_exc(), \" \" * 12, lambda line: (not line.startswith(\"Traceback\")))}\n305 ```\n306 \n307 Please check the logs for more information.\n308 \"\"\"\n309             ),\n310             button_action_block(\"View in Harness\", url=\"https://app.harness.io\"),\n311             context_block(f\"*Python Version:* {sys.version}\"),\n312         )\n313         .slack_message,\n314     )\n315     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 288,
      "line_range": [
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "321     \"\"\"Sends a Slack message for the success of an extract\"\"\"\n322     resp = requests.post(\n323         incoming_hook,\n324         json=SlackMessageComposer()\n325         .add_primary_blocks(\n326             header_block(f\"{SlackAlertIcon.OK} Extract Succeeded (id: {run_id})\"),\n327             context_block(\n328                 \"*Source:* {source}     |\".format(source=source),\n329                 \"*Status:* Extraction Succeeded     |\",\n330                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n331             ),\n332             divider_block(),\n333             text_section_block(\n334                 f\"\"\"\n335 Extract succeeded after {duration:.2f}s :tada:\n336 \n337 Please check the logs for more information.\n338 \"\"\"\n339             ),\n340             button_action_block(\"View in Harness\", url=\"https://app.harness.io\"),\n341             context_block(f\"*Python Version:* {sys.version}\"),\n342         )\n343         .slack_message,\n344     )\n345     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 322,
      "line_range": [
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "356     _ = environment\n357     resp = requests.post(\n358         incoming_hook,\n359         json=SlackMessageComposer()\n360         .add_primary_blocks(\n361             header_block(f\"{SlackAlertIcon.START} Normalizing (id: {run_id})\"),\n362             context_block(\n363                 \"*Source:* {source}     |\".format(source=source),\n364                 \"*Status:* Starting Normalization     |\",\n365                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n366             ),\n367             divider_block(),\n368             text_section_block(\n369                 f\"\"\"\n370 Pending load package discovered in stage :package:\n371 \n372 Starting normalization for: :file_folder:\n373 \n374 `{blob_name}` \n375 \"\"\"\n376             ),\n377             context_block(f\"*Python Version:* {sys.version}\"),\n378         )\n379         .slack_message,\n380     )\n381     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 357,
      "line_range": [
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "393     # trace = \"\\n\".join(f\"> {line}\" for line in traceback.format_exc().splitlines())\n394     resp = requests.post(\n395         incoming_hook,\n396         json=SlackMessageComposer()\n397         .add_primary_blocks(\n398             header_block(f\"{SlackAlertIcon.ERROR} Normalization Failed (id: {run_id})\"),\n399             context_block(\n400                 \"*Source:* {source}     |\".format(source=source),\n401                 \"*Status:* Normalization Failed     |\",\n402                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n403             ),\n404             divider_block(),\n405             text_section_block(\n406                 f\"\"\"\n407 Normalization failed after {duration:.2f}s :fire:\n408 \n409 ```\n410 {indent(traceback.format_exc(), \" \" * 12, lambda line: (not line.startswith(\"Traceback\")))}\n411 ```\n412 \n413 Please check the pod logs for more information.\n414 \"\"\"\n415             ),\n416             context_block(f\"*Python Version:* {sys.version}\"),\n417         )\n418         .slack_message,\n419     )\n420     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 394,
      "line_range": [
        394,
        395,
        396,
        397,
        398,
        399,
        400,
        401,
        402,
        403,
        404,
        405,
        406,
        407,
        408,
        409,
        410,
        411,
        412,
        413,
        414,
        415,
        416,
        417,
        418,
        419
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "426     \"\"\"Sends a Slack message for the success of an normalization\"\"\"\n427     resp = requests.post(\n428         incoming_hook,\n429         json=SlackMessageComposer()\n430         .add_primary_blocks(\n431             header_block(f\"{SlackAlertIcon.OK} Normalization Succeeded (id: {run_id})\"),\n432             context_block(\n433                 \"*Source:* {source}     |\".format(source=source),\n434                 \"*Status:* Normalization Succeeded     |\",\n435                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n436             ),\n437             divider_block(),\n438             text_section_block(\n439                 f\"\"\"\n440 Normalization took {duration:.2f}s :tada:\n441 \n442 The package was normalized successfully: :file_folder:\n443 \n444 `{blob_name}`\n445 \n446 This package is now prepared for loading.\n447 \"\"\"\n448             ),\n449         )\n450         .slack_message,\n451     )\n452     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 427,
      "line_range": [
        427,
        428,
        429,
        430,
        431,
        432,
        433,
        434,
        435,
        436,
        437,
        438,
        439,
        440,
        441,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        449,
        450,
        451
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "462     \"\"\"Sends a Slack message for the start of a load\"\"\"\n463     resp = requests.post(\n464         incoming_hook,\n465         json=SlackMessageComposer()\n466         .add_primary_blocks(\n467             header_block(f\"{SlackAlertIcon.START} Loading (id: {run_id})\"),\n468             context_block(\n469                 \"*Source:* {source}     |\".format(source=source),\n470                 \"*Status:* Starting Load     |\",\n471                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n472             ),\n473             divider_block(),\n474             *compacted_sections_blocks(\n475                 (\"*Destination*\", destination),\n476                 (\"*Dataset*\", dataset),\n477             ),\n478             context_block(f\"*Python Version:* {sys.version}\"),\n479         )\n480         .slack_message,\n481     )\n482     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 463,
      "line_range": [
        463,
        464,
        465,
        466,
        467,
        468,
        469,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "493     # trace = \"\\n\".join(f\"> {line}\" for line in traceback.format_exc().splitlines())\n494     resp = requests.post(\n495         incoming_hook,\n496         json=SlackMessageComposer()\n497         .add_primary_blocks(\n498             header_block(f\"{SlackAlertIcon.ERROR} Load Failed (id: {run_id})\"),\n499             context_block(\n500                 \"*Source:* {source}     |\".format(source=source),\n501                 \"*Status:* Normalization Failed     |\",\n502                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n503             ),\n504             divider_block(),\n505             text_section_block(\n506                 f\"\"\"\n507 Load to {destination} dataset named {dataset} failed :fire:\n508 \n509 ```\n510 {indent(traceback.format_exc(), \" \" * 12, lambda line: (not line.startswith(\"Traceback\")))}\n511 ```\n512 \n513 Please check the pod logs for more information.\n514 \"\"\"\n515             ),\n516             context_block(f\"*Python Version:* {sys.version}\"),\n517         )\n518         .slack_message,\n519     )\n520     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 494,
      "line_range": [
        494,
        495,
        496,
        497,
        498,
        499,
        500,
        501,
        502,
        503,
        504,
        505,
        506,
        507,
        508,
        509,
        510,
        511,
        512,
        513,
        514,
        515,
        516,
        517,
        518,
        519
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "531     \"\"\"Sends a Slack message for the success of an normalization\"\"\"\n532     resp = requests.post(\n533         incoming_hook,\n534         json=SlackMessageComposer()\n535         .add_primary_blocks(\n536             header_block(f\"{SlackAlertIcon.OK} Load Succeeded (id: {run_id})\"),\n537             context_block(\n538                 \"*Source:* {source}     |\".format(source=source),\n539                 \"*Status:* Loading Succeeded     |\",\n540                 \"*{date}*\".format(date=datetime.now(timezone.utc).strftime(\"%x %X\")),\n541             ),\n542             divider_block(),\n543             *compacted_sections_blocks(\n544                 (\"*Destination*\", destination),\n545                 (\"*Dataset*\", dataset),\n546             ),\n547             divider_block(),\n548             text_section_block(\n549                 f\"\"\"\n550 The package was loaded successfully: :file_folder:\n551 \n552 ```\n553 {payload}\n554 ```\n555 \"\"\"\n556             ),\n557             context_block(f\"*Python Version:* {sys.version}\"),\n558         )\n559         .slack_message,\n560     )\n561     resp.raise_for_status()\n",
      "col_offset": 11,
      "end_col_offset": 5,
      "filename": "src/cdf/integrations/slack.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 532,
      "line_range": [
        532,
        533,
        534,
        535,
        536,
        537,
        538,
        539,
        540,
        541,
        542,
        543,
        544,
        545,
        546,
        547,
        548,
        549,
        550,
        551,
        552,
        553,
        554,
        555,
        556,
        557,
        558,
        559,
        560
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "50 \n51     os.execvp(\"uv\", [\"uv\", \"run\", \"--help\"])\n",
      "col_offset": 4,
      "end_col_offset": 44,
      "filename": "src/cdf/main.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 51,
      "line_range": [
        51
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "50 \n51     os.execvp(\"uv\", [\"uv\", \"run\", \"--help\"])\n",
      "col_offset": 4,
      "end_col_offset": 44,
      "filename": "src/cdf/main.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 51,
      "line_range": [
        51
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "9 \n10 import pickle\n11 import typing as t\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "src/cdf/proxy/planner.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 10,
      "line_range": [
        10
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "54             try:\n55                 plan = pickle.loads(ser_plan)\n56                 resp = _plan(plan)\n",
      "col_offset": 23,
      "end_col_offset": 45,
      "filename": "src/cdf/proxy/planner.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 55,
      "line_range": [
        55
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    }
  ]
}